name: Not a web
author: "[flame](https://github.com/zolbooo)"
category: crypto

description: |
  Last one was too easy, let's try again!

attribution: Authored by [flame](https://github.com/zolbooo)
type: dynamic

extra:
  initial: 1000
  decay: 10
  minimum: 100
image: null

connection_info: https://not-web.ctf.empasoft.tech

hints:
  - cost: 0
    content: |
      ```python
      import os
      import json
      import base64
      from typing import Optional, Tuple
      from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

      key = os.urandom(64)


      def verify_token(token: str) -> Tuple[bool, Optional[bytes]]:
          try:
              protected_header_b64, _, iv_b64, ciphertext_b64, _ = token.split(".")
              protected_header = json.loads(
                  base64.urlsafe_b64decode(protected_header_b64 + "==")
              )
              iv = base64.urlsafe_b64decode(iv_b64 + "==")
              ciphertext = base64.urlsafe_b64decode(ciphertext_b64 + "==")
              if (
                  protected_header.get("alg") != "dir"
                  or protected_header.get("enc") != "A256XTS"
              ):
                  return False, None
              decrypted = (
                  Cipher(algorithms.AES(key), modes.XTS(iv)).decryptor().update(ciphertext)
              )
              try:
                  data = json.loads(decrypted)
              except:
                  return False, decrypted
              return data.get("is_admin"), None
          except Exception as e:
              return False, None


      def build_token_contents(username: str, password: str) -> str:
          return json.dumps({"username": username, "password": password, "is_admin": False}, ensure_ascii=False)


      def generate_token(username: str, password: str) -> str:
          protected_header = json.dumps({"alg": "dir", "enc": "A256XTS"}).encode()
          iv = os.urandom(16)
          contents = build_token_contents(username, password).encode()
          ciphertext = (
              Cipher(algorithms.AES(key), modes.XTS(iv)).encryptor().update(contents)
          )
          encrypted_key = b''
          tag = b''
          token = map(
              lambda data: base64.urlsafe_b64encode(data).decode().rstrip("="),
              [protected_header, encrypted_key, iv, ciphertext, tag],
          )
          return ".".join(token)
      ```


flags:
  - type: regex
    content: ECTF{s0rry_[A-Za-z\d\-_]{8}_extr3m3_c1ph3rt3xt-[A-Za-z\d\-_]{8}_n0t_s0_s3cur3_[A-Za-z\d\-_]{8}}
tags:
  - crypto
  - web
version: "0.1"
